import React from 'react'
import { useState } from 'react'
import Dblue from './Dblue';
import scc from '../Images/q2sca.png'
import spi from '../Images/spi.png'
import spiv from '../Images/spiv.png'
import dsp from '../Images/sca.png'
import riskv from '../Images/Capture2.PNG'
import alsu from '../Images/alsu_schematic_q1.png'
import alsv from '../Images/als.png'
import absdc from '../Images/sdc1.png'
import pipe from '../Images/pipeimg.png'
import w16sch from '../Images/w16sch.png'
import mkp from '../Images/schematic_mk.png'
import alublk from '../Images/alu_blks.png'
import Dyellow from './Dyellow';
export default function Dmlfcmp({imgd}) {
    const [show,setShow]=useState(false);  

    return (
        <div className='mdcmp'>
            <img src={imgd}alt='Loading⏳'/>
            <button onClick={()=>{setShow(!show)}} >{show? "Hide" :"Show"} </button>
            {show? <div className='projects'>
      <Dyellow title={"MK5303 Processor"} para={"Design of Three address instruction-format processor with register, direct, indirect and immediate addressing modes. I have also designed the processor instruction set with a simple documentation for its datasheet. The schematic was produced using Vivado tool and the functionality was checked using QuestaSim tool. The project was implemented using Verilog"} img={mkp} linka={"https://github.com/m7md5303/MK5303-Processor"}/>
      <Dblue title={"16-bit Wallace multiplier"} para={"16-bit Wallace multiplier implemented with Verilog and synthesised using Design Compiler tool. The functionality was checked using a simple testbench simulated on QuestaSim. The block mainly consists of sub blocks of just half and full adders."} img={w16sch} linka={"https://github.com/m7md5303/16-bit-wallace-multiplier"}/>
      <Dyellow title={"Pipelined Risk-v based Processor"} para={"A 5-stage pipelined risk-v based processor implemented with verilog along with the implementation of a hazard handling unit. The stages are Fetch, decode, execute, memory and write back cycles. The functionality was tested through QuestaSim while the schematic was produced using Quartus Prime tool."} img={pipe} linka={"https://github.com/m7md5303/Pipelined-Risk-V-based-processor"}/>
      <Dblue title={"4-operation ALU using Vivado block design method"} para={"The ALU was designed using the block design method provided by Vivado. The multiplier IP was added from Vivado IP list while the other blocks were designed using Verilog. A simple SystemVerilog testbench was simulated on Vivado to validate the functionality. The whole flow till generating the bitstream can be viewed from the pdf uploaded on the design repo on GitHub."} img={alublk}linka={"https://github.com/m7md5303/ALU-with-Vivado-block-design-method"}/>
      <Dyellow title={"SDC file for two blocks"}para={"SDC file concerned with timings in two blocks: A and B. It sets the max delays for both input and output ports. Creation of clocks and generating clock signals from their origin are also included. It also excludes false paths from being analyzed to save runtime in the STA concerned tools."}img={absdc}linka={"https://github.com/m7md5303/AB_SDC"}/>
      <Dblue title={"SPI Slave UVM environment"}para={"I have build a complete UVM environment for verifying SPI_Slave with a single port RAM. I have also designed the golden model for checking the output with it. The waveforms and the UVM packages were used through Questa Sim tool."}img={spiv}linka={"https://github.com/m7md5303/SPI_UVM"}/>
      <Dyellow title={"ALS_Unit Verification"} para={"A 5-operation Arithmetic Logic unit was verified using system verilog. Suitable stimulus wase generated with the company of constraint blocks to check the design functionality. The design performance was watched through the wave form generated by Questa Sim."}img={alsv}linka={"https://github.com/m7md5303/ALSU-SV-Verification"}/>
      <Dblue title={"SPI_slave with a single port RAM Design"} para={"SPI communication protocol is one of the most famous protocols. In this project a spi slave was implemented using verilog accompanied with a single port RAM. The master is able to send the data whether address or word to be stored in the RAM block through the implemented slave. It is also capable of receiving the serial data after being transformed from parallel after 12 clock cycles from asserting the SS_n signal."} img={spi} linka={"https://github.com/m7md5303/SPI_slave-with-a-single-port-RAM"}/>
      <Dyellow title={"Digital Signal Processing Unit Design"} para={"A DSP based on xilinix FPGA DSP (DSP48E1) with some extra combinational logic. The project was implemented using verilog. The design schematic was produced through vivado tool. The block is capable of performing many operations synchronously with the clock."} img={dsp} linka={"https://github.com/m7md5303/Digital-Signal-Processing-Unit"}/>
      <Dblue title={"Single cycle Risk v Design"} para={"A single cycle risk-v processor implemented using Verilog HDL. The schematic was generated using Quartz tool. The functionality was tested through forcing the inputs with certain values using ModelSim simulation."} img={riskv} linka={"https://github.com/m7md5303/Single-cycle-Risk-v"}/>
      <Dyellow title={"ALS_Unit Design"} para={"An arithmetic logic shift unit that performs operations on its inputs including XORing, Multiplication and rotating implemented with verilog. The functionality was tested by a testbench simulated using questasim. The schematic was generated with Quartz tool"} img={alsu} linka={"https://github.com/m7md5303/ALS_Unit"}/>   
      <Dblue title={"Simple moore machine for self driving car control system Design"} para={"A simple moore self driving car control system. The system is responsible for accelerating, decelerating or even braking up the car. It is also capable of providing a signal to lock or unlock the doors. The system was implemented with verilog and tested with a simple testbench simulated by questasim tool. The schematic was generated with Vivado tool."} img={scc} linka={"https://github.com/m7md5303/S_S_D_C_C"}/>
      
      
            </div> :null}
        </div>
    )
}
